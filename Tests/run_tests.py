import numpy as np
import unittest
from Task1 import ShapeMismatch, applymask
from Task2 import MatrixMismatch, prep_vec


class Task1Tests(unittest.TestCase):

    def test_correct(self):
        npinput = np.array([[1, 1, 0], [1, 2, 2], [0, 2, 2]])
        npmask = np.array([[1, 1, 1], [1, 0, 0], [2, 2, 2]])
        result = np.array([[1, 1, 1], [1, 2, 2], [0, 2, 2]])
        self.assertTrue(np.all(result == applymask(npinput, npmask)))

    def test_shape(self):
        npinput = np.array([[1, 1, 0], [1, 2, 2], [0, 2, 2]])
        npmask = np.array([[1, 1, 1], [1, 0, 0], [2, 2, 2], [0, 1, 0]])
        with self.assertRaises(ShapeMismatch):
            applymask(npinput, npmask)


class Task2Tests(unittest.TestCase):

    def test_correct(self):
        M = [
          [7.10059172, 6.58436214, 6.12244898, 5.70749108, 5.33333333],
          [26.03550296, 24.14266118, 22.44897959, 20.9274673, 19.55555556],
          [73.37278107, 68.03840878, 63.26530612, 58.97740785, 55.11111111],
          [163.31360947, 151.44032922, 140.81632653, 131.27229489, 122.6666667],
          [2.36686391, 2.19478738, 2.04081633, 1.90249703, 1.77777778],
          [49.70414201, 46.09053498, 42.85714286, 39.95243757, 37.33333333]
        ]
        calib_space = 2
        calib_vec = [0.65, 0.7, 0.75]
        self.assertTrue(np.all(prep_vec(calib_space, calib_vec, M)))

    def test_smallerspace(self):
        M = [
          [7.10059172, 6.58436214, 6.12244898, 5.70749108, 5.33333333],
          [26.03550296, 24.14266118, 22.44897959, 20.9274673, 19.55555556],
          [73.37278107, 68.03840878, 63.26530612, 58.97740785, 55.11111111],
          [163.31360947, 151.44032922, 140.81632653, 131.27229489, 122.6666667],
          [2.36686391, 2.19478738, 2.04081633, 1.90249703, 1.77777778],
          [49.70414201, 46.09053498, 42.85714286, 39.95243757, 37.33333333]
        ]
        calib_space = 1
        calib_vec = [0.65, 0.7, 0.75]
        self.assertTrue(np.all(prep_vec(calib_space, calib_vec, M)))

    def test_largerspace(self):
        M = [
          [7.10059172, 6.58436214, 6.12244898, 5.70749108, 5.33333333],
          [26.03550296, 24.14266118, 22.44897959, 20.9274673, 19.55555556],
          [73.37278107, 68.03840878, 63.26530612, 58.97740785, 55.11111111],
          [163.31360947, 151.44032922, 140.81632653, 131.27229489, 122.6666667],
          [2.36686391, 2.19478738, 2.04081633, 1.90249703, 1.77777778],
          [49.70414201, 46.09053498, 42.85714286, 39.95243757, 37.33333333]
        ]
        calib_space = 3
        calib_vec = [0.65, 0.7, 0.75]
        self.assertTrue(np.all(prep_vec(calib_space, calib_vec, M)))

    def test_shape(self):
        M = [
          [7.10059172, 6.58436214, 6.12244898, 5.70749108, 5.33333333],
          [26.03550296, 24.14266118, 22.44897959, 20.9274673, 19.55555556],
          [73.37278107, 68.03840878, 63.26530612, 58.97740785, 55.11111111],
          [163.31360947, 151.44032922, 140.81632653, 131.27229489, 122.6666667],
          [2.36686391, 2.19478738, 2.04081633, 1.90249703, 1.77777778],
          [49.70414201, 46.09053498, 42.85714286, 39.95243757, 37.33333333]
        ]
        calib_space = 1
        calib_vec = [0.65, 0.7, 0.75, 0.8, 0.85, 0.9]
        with self.assertRaises(MatrixMismatch):
            prep_vec(calib_space, calib_vec, M)


if __name__ == '__main__':
    unittest.main()
